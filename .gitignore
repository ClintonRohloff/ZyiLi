import kivy
kivy.require("2.0.0")

from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.behaviors.focus import FocusBehavior

user_data = {}
user_ids = 0

class FirstScreen(Screen):
    pass

class SecondScreen(Screen):
    pass

class ThirdScreen(Screen):
    pass

class WindowManager(ScreenManager):
    pass

class MyApp(App):

    # The below function controls the application's button to submit a user's data.
    # The button's function loads the user data into a dictionary called user_data and assigns a unique
    # user identification number.

    def SubmitButton(self):

        global user_ids
        user_ids += 1

        firstname = self.root.ids.first.ids.first_name.text
        lastname = self.root.ids.first.ids.last_name.text
        full_name = lastname + ", " + firstname

        age = self.root.ids.first.ids.age.text

        male = self.root.ids.first.ids.male.active
        female = self.root.ids.first.ids.female.active
        other = self.root.ids.first.ids.other.active
        sex = ""
        sexual_orientation = ""

        e_mail = self.root.ids.first.ids.e_mail.text
        phone = self.root.ids.first.ids.phone.text

        if male == True:
            sex = "Male"
        elif female == True:
            sex = "Female"
        elif other == True:
            sex = "Other"
        else:
            print("Throw Error")

        if self.root.ids.first.ids.sexual_orientation.text == "Homosexual":
            sexual_orientation = "Homosexual"
        elif self.root.ids.first.ids.sexual_orientation.text == "Heterosexual":
            sexual_orientation = "Heterosexual"
        elif self.root.ids.first.ids.sexual_orientation.text == "Bisexual/Other":
            sexual_orientation = "Bisexual/Other"
        else:
            pass

        user = {user_ids: [full_name, age, sex, sexual_orientation, e_mail, phone, user_ids]}

        if user not in user_data.items():
            user_data.update(user)

        self.root.ids.second.ids.user_info.clear_widgets(children = None)
        print(user_data)

        for key, value in user_data.items():

            self.root.ids.second.ids.user_info.add_widget(Button(text = value[0], size_hint = (None, None), height = 20, width = 200, text_size = (200, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
            self.root.ids.second.ids.user_info.add_widget(Label(text = value[1], size_hint = (None, None), height = 20, width = 20, text_size = (20, 20), halign = "center"))
            self.root.ids.second.ids.user_info.add_widget(Label(text = value[2], size_hint = (None, None), height = 20, width = 50, text_size = (50, 20), halign = "center"))
            self.root.ids.second.ids.user_info.add_widget(Label(text = value[3], size_hint = (None, None), height = 20, width = 100, text_size = (100, 20), halign = "center"))
            self.root.ids.second.ids.user_info.add_widget(Label(text = value[4], size_hint = (None, None), height = 20, width = 150, text_size = (150, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
            self.root.ids.second.ids.user_info.add_widget(Label(text = value[5], size_hint = (None, None), height=20, width = 100, text_size = (100, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))

    # The below function controls the application's spinner which organizes the users' data.

    def DataSpinner(self):

        if self.root.ids.second.ids.dataspinner.text == "Name":
            self.root.ids.second.ids.user_info.clear_widgets(children=None)

            organized_user_data = list(user_data.values())
            organized_user_data.sort(key=lambda x: x[0])

            for value in organized_user_data:
                self.root.ids.second.ids.user_info.add_widget(Button(text=value[0], size_hint=(None, None), height=20, width = 200, text_size = (200, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[1], size_hint=(None, None), height=20, width = 20, text_size = (20, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[2], size_hint=(None, None), height=20, width = 50, text_size = (50, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[3], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[4], size_hint=(None, None), height=20, width = 150, text_size = (150, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[5], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))

        # The below lambda function is different to ensure that ages are sorted with an integer and not a string.

        elif self.root.ids.second.ids.dataspinner.text == "Age":
            self.root.ids.second.ids.user_info.clear_widgets(children=None)

            organized_user_data = list(user_data.values())
            organized_user_data.sort(key=lambda x: int(x[1]))
            print(organized_user_data)

            for value in organized_user_data:
                self.root.ids.second.ids.user_info.add_widget(Button(text=value[0], size_hint=(None, None), height=20, width = 200, text_size = (200, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[1], size_hint=(None, None), height=20, width = 20, text_size = (20, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[2], size_hint=(None, None), height=20, width = 50, text_size = (50, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[3], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[4], size_hint=(None, None), height=20, width = 150, text_size = (150, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[5], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))

        elif self.root.ids.second.ids.dataspinner.text == "Sex":
            self.root.ids.second.ids.user_info.clear_widgets(children=None)

            organized_user_data = list(user_data.values())
            organized_user_data.sort(key=lambda x: x[2])
            print(organized_user_data)

            for value in organized_user_data:
                self.root.ids.second.ids.user_info.add_widget(Button(text=value[0], size_hint=(None, None), height=20, width = 200, text_size = (200, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[1], size_hint=(None, None), height=20, width = 20, text_size = (20, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[2], size_hint=(None, None), height=20, width = 50, text_size = (50, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[3], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[4], size_hint=(None, None), height=20, width = 150, text_size = (150, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[5], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))

        elif self.root.ids.second.ids.dataspinner.text == "Sexual Orientation":
            self.root.ids.second.ids.user_info.clear_widgets(children=None)

            organized_user_data = list(user_data.values())
            organized_user_data.sort(key=lambda x: x[3])
            print(organized_user_data)

            for value in organized_user_data:
                self.root.ids.second.ids.user_info.add_widget(Button(text=value[0], size_hint=(None, None), height=20, width = 200, text_size = (200, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[1], size_hint=(None, None), height=20, width = 20, text_size = (20, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[2], size_hint=(None, None), height=20, width = 50, text_size = (50, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[3], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[4], size_hint=(None, None), height=20, width = 150, text_size = (150, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[5], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))

        elif self.root.ids.second.ids.dataspinner.text == "Organize Users":
            self.root.ids.second.ids.user_info.clear_widgets(children=None)

            for key, value in user_data.items():
                self.root.ids.second.ids.user_info.add_widget(Button(text=value[0], size_hint=(None, None), height=20, width = 200, text_size = (200, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[1], size_hint=(None, None), height=20, width = 20, text_size = (20, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[2], size_hint=(None, None), height=20, width = 50, text_size = (50, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[3], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[4], size_hint=(None, None), height=20, width = 150, text_size = (150, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))
                self.root.ids.second.ids.user_info.add_widget(Label(text=value[5], size_hint=(None, None), height=20, width = 100, text_size = (100, 20), halign = "center", markup = True, shorten = True, shorten_from = "right"))

        else:
            pass

    #Filter Button Logic for Third Screen
    def FilterButton(self):
        pass


if __name__ == "__main__":
    MyApp().run()
